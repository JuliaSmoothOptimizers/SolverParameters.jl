var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SolverParameters]","category":"page"},{"location":"reference/#SolverParameters.AbstractDomain","page":"Reference","title":"SolverParameters.AbstractDomain","text":"AbstractDomain\n\nAn abstract domain type that superseeds any specific domain implementation. Child types should implement the following functions:\n\nlower(d::ChildDomain{T}): return the lower bound of the domain;\nupper(d::ChildDomain{T}): return the upper bound of the domain;\n∈(x::T, D::ChildDomain{T}): return true if a value x is in the domain and false otherwise.\n\nSee RealInterval, IntegerRange, IntegerSet, BinaryRange, CategoricalSet for concrete implementations.\n\nlower and upper are not implemented for categorical domains.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.AbstractParameter","page":"Reference","title":"SolverParameters.AbstractParameter","text":"AbstractParameter{T}\n\nAn Abstract type for parameters of value type T.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.AbstractParameterSet","page":"Reference","title":"SolverParameters.AbstractParameterSet","text":"AbstractParameterSet\n\nAn abstract type that represents a set of parameters.\n\nExample:\n\n  struct MySolverParameterSet <: AbstractParameterSet\n    η₁::Parameter(1.0e-5, RealInterval(0, 1; lower_open=true, upper_open=false))\n  end\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.BinaryRange","page":"Reference","title":"SolverParameters.BinaryRange","text":"BinaryRange{T <: Bool} <: IntegerDomain{T}\n\nBinary range for boolean parameters. Note: This concrete type is not mutable as it would break the purpose of a binary range.\n\nExamples:\n\nBinaryRange()\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.CategoricalDomain","page":"Reference","title":"SolverParameters.CategoricalDomain","text":"Categorical Domain for categorical variables.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.CategoricalSet","page":"Reference","title":"SolverParameters.CategoricalSet","text":"CategoricalSet{T} <: CategoricalDomain{T}\n\nSet of possible values for a categorical variable.\n\nExamples:\n\nCategoricalSet()\nCategoricalSet(\"A\", \"B\")\nCategoricalSet(:A, :B)\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.IntegerDomain","page":"Reference","title":"SolverParameters.IntegerDomain","text":"Integer Domain for discrete variables.     1. Integer range;     2. Integer Set;     3. BinaryRange.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.IntegerRange","page":"Reference","title":"SolverParameters.IntegerRange","text":"IntegerRange{T <: Integer} <: IntegerDomain{T}\n\nInterval of possible values for an integer variable.\n\nExamples:\n\nIntegerRange(1, 4)\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.IntegerSet","page":"Reference","title":"SolverParameters.IntegerSet","text":"IntegerSet{T} <: IntegerDomain{T}\n\nSet of possible values for an integer variable.\n\nExamples:\n\nIntegerSet(1, 3, 4)\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.Parameter","page":"Reference","title":"SolverParameters.Parameter","text":"Parameter{T, AbstractDomain{T}} <: AbstractParameter{T}\n\nParameter(value::T; name::String = \"\")\nParameter(value::T, domain::AbstractDomain{T}; name::String = \"\")\nParameter(value::T, domain::AbstractDomain{T}, name::String)\n\nA Parameter structure handles the following attributes describing one parameter:\n\nvalue::T: default value of the parameter;\ndomain::AbstractDomain{T}: domain of the possible values of the parameter;\nname::String: name of the parameter.\n\nIf no domain is specified, the constructor uses (-typemin(x), typemax(x)) as domain.\n\nExamples:\n\n  Parameter(Float64(42))\n  Parameter(\"A\", CategoricalSet([\"A\", \"B\", \"C\", \"D\"]))\n  Parameter(Int32(5), IntegerRange(Int32(5), Int32(20)))\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.RealDomain","page":"Reference","title":"SolverParameters.RealDomain","text":"Real Domain for continuous variables\n\n\n\n\n\n","category":"type"},{"location":"reference/#SolverParameters.RealInterval","page":"Reference","title":"SolverParameters.RealInterval","text":"RealInterval{T <: Integer} <: IntegerDomain{T}\n\nInterval of possible values for a real variable.\n\nExamples:\n\nRealInterval(1.3, 4.9)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.convert-Union{Tuple{T}, Tuple{Parameter{T, D} where D<:AbstractDomain{T}, Any}} where T<:AbstractFloat","page":"Reference","title":"Base.convert","text":"convert(::Parameter{T}, value)\n\nConverts a value to the corresponding type of a giver parameter. If T is integer, this function will first round the value.\n\nExamples:\n\n  real_param = Parameter(1.5, RealInterval(0.0, 2.0), \"real_param\")\n  a = 1\n  convert(real_param, a)\n  1.0\n\n  int_param = Parameter(1, IntegerRange(1, 4), \"int_param\")\n  a = 1.6\n  convert(int_param, a)\n  2\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.length-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"Base.length","text":"Returns the number of parameters in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.names-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"Base.names","text":"Returns the name of the parameters in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.values-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"Base.values","text":"Returns current values of each parameter in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.check_value-Union{Tuple{T}, Tuple{AbstractDomain{T}, T}} where T","page":"Reference","title":"SolverParameters.check_value","text":"check_value(domain::AbstractDomain{T}, new_value::T)\n\nThrow a DomainError if new_value is not in the domain.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.domain-Union{Tuple{Parameter{T, D} where D<:AbstractDomain{T}}, Tuple{T}} where T","page":"Reference","title":"SolverParameters.domain","text":"Returns the domain of a parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.length_num-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.length_num","text":"Returns the number of numerical parameters in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.lower_bounds!-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.lower_bounds!","text":"Returns lower bounds of each numerical parameter in a parameter set in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.lower_bounds-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.lower_bounds","text":"Returns lower bounds of each numerical parameter in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.name-Union{Tuple{Parameter{T, D} where D<:AbstractDomain{T}}, Tuple{T}} where T","page":"Reference","title":"SolverParameters.name","text":"Returns the name of a parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.names!-Union{Tuple{T}, Tuple{T, Vector{String}}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.names!","text":"Returns the name of the parameters in a parameter set in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.set_names!-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.set_names!","text":"Set names of parameters to their fieldnames.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.set_value!-Union{Tuple{T}, Tuple{Parameter{T, D} where D<:AbstractDomain{T}, T}} where T","page":"Reference","title":"SolverParameters.set_value!","text":"set_value!(parameter::Parameter{T}, new_value::T)\n\nSet value of a parameter. It throws a DomainError if new_value is not in the domain of the parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.set_values!-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.set_values!","text":"Updates the values of a parameter set by the values given in a vector of values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.set_values_num!-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.set_values_num!","text":"Updates the numerical values of a parameter set by the values given in a vector of values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.upper_bounds!-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.upper_bounds!","text":"Returns upper bounds of each numerical parameter in a parameter set in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.upper_bounds-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.upper_bounds","text":"Function that returns upper bounds of each numerical parameter in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.value-Union{Tuple{Parameter{T, D} where D<:AbstractDomain{T}}, Tuple{T}} where T","page":"Reference","title":"SolverParameters.value","text":"Returns the current value of a parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.values!-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.values!","text":"Returns current values of each parameter in a parameter set in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.values_num!-Union{Tuple{S}, Tuple{T}, Tuple{T, AbstractVector{S}}} where {T<:AbstractParameterSet, S}","page":"Reference","title":"SolverParameters.values_num!","text":"Returns current values of each numerical parameter in a parameter set in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverParameters.values_num-Tuple{T} where T<:AbstractParameterSet","page":"Reference","title":"SolverParameters.values_num","text":"Returns current values of each numerical parameter in a parameter set.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SolverParameters","category":"page"},{"location":"#SolverParameters","page":"Home","title":"SolverParameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SolverParameters.","category":"page"}]
}
